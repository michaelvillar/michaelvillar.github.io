// Generated by CoffeeScript 1.4.0
(function() {
  var createAnimatedCircle, createCircleSVG, createGalaxy, createRandomGalaxy, createSVG, random, svgIndex, tick,
    _this = this;

  svgIndex = 0;

  random = function(a, b) {
    return Math.round(Math.random() * (b - a)) + a;
  };

  createSVG = function(text) {
    var div;
    div = document.createElement('div');
    div.innerHTML = text;
    return div;
  };

  createCircleSVG = function(options) {
    var circle, _ref, _ref1;
    if (options == null) {
      options = {};
    }
    if ((_ref = options.color) == null) {
      options.color = '#eb4986';
    }
    if ((_ref1 = options.radius) == null) {
      options.radius = 10;
    }
    options.radius = Math.ceil(options.radius);
    svgIndex += 1;
    circle = createSVG('<svg class="circle" width="' + options.radius + '" height="' + options.radius + '" version="1.1" xmlns="http://www.w3.org/2000/svg">\n<defs>\n  <mask id="mask' + svgIndex + '">\n<rect x="0" y="0" width="' + options.radius + '" height="' + options.radius + '" fill="white"></rect>\n<circle class="inner" cx="' + options.radius / 2 + '" cy="' + options.radius / 2 + '" r="' + options.radius / 2 + '" fill="black"></circle>\n  </mask>\n</defs>\n<circle class="outer" cx="' + options.radius / 2 + '" cy="' + options.radius / 2 + '" r="' + options.radius / 2 + '" fill="' + options.color + '" mask="url(#mask' + svgIndex + ')"></circle>\n</svg>');
    circle.style.marginLeft = "-" + (options.radius / 2) + "px";
    circle.style.marginTop = "-" + (options.radius / 2) + "px";
    return circle;
  };

  createAnimatedCircle = function(position, options) {
    var circle, innerCircle, outerCircle, _ref;
    if (position == null) {
      position = [];
    }
    if (options == null) {
      options = {};
    }
    if ((_ref = options.delay) == null) {
      options.delay = 0;
    }
    circle = createCircleSVG(options);
    circle.style.left = "" + position[0] + "px";
    circle.style.top = "" + position[1] + "px";
    circle.style.position = "absolute";
    document.body.appendChild(circle);
    innerCircle = circle.querySelector('.inner');
    outerCircle = circle.querySelector('.outer');
    Dynamics.css(outerCircle, {
      transform: "scale(.01)"
    });
    Dynamics.css(innerCircle, {
      transform: "scale(.01)"
    });
    new Dynamics.Animation(outerCircle, {
      transform: "scale(1)"
    }, {
      type: Dynamics.Types.EaseInOut,
      friction: 200,
      duration: 1000 * 1.1
    }).start({
      delay: options.delay
    });
    new Dynamics.Animation(innerCircle, {
      transform: "scale(1.01)"
    }, {
      type: Dynamics.Types.EaseInOut,
      friction: 200,
      duration: 1000 * 1.1,
      complete: function() {
        return circle.parentNode.removeChild(circle);
      }
    }).start({
      delay: options.delay + 200 * 1.1
    });
    return circle;
  };

  createGalaxy = function(options) {
    var angle, center, circle, count, delay, i, innerRadius, position, translate, _i, _ref, _results;
    if (options == null) {
      options = {};
    }
    if ((_ref = options.radius) == null) {
      options.radius = 30;
    }
    count = 10;
    innerRadius = options.radius / 15;
    center = options.center;
    _results = [];
    for (i = _i = 0; 0 <= count ? _i < count : _i > count; i = 0 <= count ? ++_i : --_i) {
      position = [center[0], center[1]];
      angle = i / count * Math.PI * 2;
      delay = 0;
      position[0] += Math.cos(angle) * innerRadius;
      position[1] += Math.sin(angle) * innerRadius;
      circle = createAnimatedCircle(position, {
        delay: delay,
        radius: options.radius / 3,
        color: options.color
      });
      translate = [];
      translate[0] = Math.cos(angle) * options.radius;
      translate[1] = Math.sin(angle) * options.radius;
      translate[1] = Math.round(translate[1]);
      _results.push(new Dynamics.Animation(circle, {
        transform: "translateX(" + translate[0] + "px) translateY(" + translate[1] + "px)"
      }, {
        type: Dynamics.Types.EaseInOut,
        friction: 200,
        duration: 1200 * 1.2
      }).start({
        delay: delay
      }));
    }
    return _results;
  };

  createRandomGalaxy = function() {
    var center;
    center = [random(200, window.innerWidth - 200), random(200, window.innerHeight - 200)];
    createGalaxy({
      center: center
    });
    return setTimeout(function() {
      return createGalaxy({
        center: center,
        radius: 50,
        color: '#C9F668'
      });
    }, 400);
  };

  tick = function() {
    return createRandomGalaxy();
  };

  tick();

  setInterval(tick, 1000);

}).call(this);
