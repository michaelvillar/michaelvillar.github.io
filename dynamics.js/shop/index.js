// Generated by CoffeeScript 1.4.0
(function() {
  var Loading, SOCKS_COUNT, cumulativeOffset, fade, grid, loading, logo,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SOCKS_COUNT = 34;

  fade = (function() {
    var el, hidden, hide, hideTimeout, show;
    el = document.querySelector('#fade');
    el.style.display = 'none';
    hideTimeout = null;
    hidden = true;
    show = function() {
      var _this = this;
      hidden = false;
      el.style.display = 'block';
      if (hideTimeout) {
        clearTimeout(hideTimeout);
      }
      hideTimeout = null;
      return setTimeout(function() {
        return el.className = 'visible';
      });
    };
    hide = function() {
      hidden = true;
      el.className = '';
      return hideTimeout = setTimeout(function() {
        return el.style.display = 'none';
      }, 450);
    };
    return {
      show: show,
      hide: hide,
      isHidden: function() {
        return hidden;
      }
    };
  })();

  cumulativeOffset = function(el) {
    var left, top;
    top = 0;
    left = 0;
    while (el) {
      top += el.offsetTop || 0;
      left += el.offsetLeft || 0;
      el = el.offsetParent;
    }
    return {
      top: top,
      left: left
    };
  };

  logo = (function() {
    var el, scrollFade, show, updateOffset;
    el = document.querySelector('#logo');
    el.addEventListener('click', function() {
      return grid.closeCurrentItem();
    });
    scrollFade = 30;
    updateOffset = function(options) {
      var offset, scrollY, _ref;
      if (options == null) {
        options = {};
      }
      if ((_ref = options.animated) == null) {
        options.animated = false;
      }
      if (!fade.isHidden()) {
        return;
      }
      scrollY = Math.min(window.scrollY, scrollFade);
      offset = scrollY / scrollFade;
      new Dynamics.Animation(el, {
        opacity: 1 - offset,
        transform: "translateY(" + (-offset * 10) + "px)"
      }, {
        type: Dynamics.Types.EaseInOut,
        duration: 300,
        animated: options.animated
      }).start();
      if (offset >= 1) {
        return el.className = "hidden";
      } else {
        return el.className = "";
      }
    };
    show = function() {
      new Dynamics.Animation(el, {
        opacity: 1,
        transform: "none"
      }, {
        type: Dynamics.Types.Spring,
        duration: 500
      }).start();
      return el.className = "";
    };
    return {
      show: show,
      updateOffset: updateOffset
    };
  })();

  Loading = (function() {

    function Loading(el) {
      this.stop = __bind(this.stop, this);

      this.tick = __bind(this.tick, this);

      this.start = __bind(this.start, this);
      this.el = el;
      this.dots = this.el.querySelectorAll('span');
      this.current = 0;
      this.animated = false;
      this.hiddenIndexes = [];
    }

    Loading.prototype.start = function() {
      if (this.animated) {
        return;
      }
      this.animated = true;
      this.tick();
      return this.interval = setInterval(this.tick, 500);
    };

    Loading.prototype.tick = function() {
      var dot,
        _this = this;
      dot = this.dots[this.current];
      if (this.stopping) {
        setTimeout(function() {
          return new Dynamics.Animation(dot, {
            opacity: 0
          }, {
            type: Dynamics.Types.EaseInOut,
            duration: 300
          }).start();
        }, 350);
        this.hiddenIndexes.push(this.current);
      }
      new Dynamics.Animation(dot, {
        transform: "translateY(-10px)"
      }, {
        type: Dynamics.Types.GravityWithForce,
        bounce: 60,
        gravity: 1300
      }).start();
      this.current += 1;
      if (this.current > 2) {
        this.current = 0;
      }
      if (this.hiddenIndexes.indexOf(this.current) !== -1) {
        if (this.interval) {
          clearInterval(this.interval);
        }
        return this.hiddenIndexes = [];
      }
    };

    Loading.prototype.stop = function() {
      if (!this.animated) {
        return;
      }
      this.stopping = true;
      return this.animated = false;
    };

    return Loading;

  })();

  loading = new Loading(document.querySelector('header .loading'));

  loading.start();

  grid = (function() {
    var Item, closeCurrentItem, currentItem, gridEl, i, item, itemClicked, itemLoaded, items, loadedCount, productEl, showItems, _i, _j, _len;
    gridEl = document.querySelector('#grid');
    productEl = document.querySelector('#product');
    Item = (function() {

      function Item(i) {
        this.imgLoaded = __bind(this.imgLoaded, this);

        this.close = __bind(this.close, this);

        this.itemClick = __bind(this.itemClick, this);

        this.absolutePosition = __bind(this.absolutePosition, this);

        this.show = __bind(this.show, this);

        this.itemOut = __bind(this.itemOut, this);

        this.itemOver = __bind(this.itemOver, this);

        this.load = __bind(this.load, this);
        this.index = i;
        this.el = document.createElement('a');
        this.el.className = "item";
        this.img = document.createElement('img');
        this.el.appendChild(this.img);
        this.img.addEventListener('load', this.imgLoaded);
        this.el.addEventListener('mouseover', this.itemOver);
        this.el.addEventListener('mouseout', this.itemOut);
        this.el.addEventListener('click', this.itemClick);
      }

      Item.prototype.load = function() {
        return this.img.src = "./img/socks/socks-" + this.index + ".jpg";
      };

      Item.prototype.itemOver = function() {
        return new Dynamics.Animation(this.el, {
          transform: "scale(1.18)",
          opacity: 1
        }, {
          type: Dynamics.Types.Spring,
          frequency: 25,
          duration: 300
        }).start();
      };

      Item.prototype.itemOut = function() {
        return new Dynamics.Animation(this.el, {
          transform: "none"
        }, {
          type: Dynamics.Types.Spring,
          duration: 1500
        }).start();
      };

      Item.prototype.show = function() {
        var _this = this;
        Dynamics.css(this.el, {
          opacity: 0,
          transform: "scale(.01)"
        });
        gridEl.appendChild(this.el);
        return setTimeout(function() {
          return new Dynamics.Animation(_this.el, {
            transform: "scale(1)",
            opacity: 1
          }, {
            type: Dynamics.Types.Spring,
            friction: 500,
            frequency: 25,
            duration: 2500
          }).start();
        }, this.index * 20);
      };

      Item.prototype.absolutePosition = function() {
        var offset, productOffset;
        offset = cumulativeOffset(this.el);
        productOffset = cumulativeOffset(productEl);
        return {
          top: offset.top - window.scrollY - productOffset.top,
          left: offset.left - window.scrollX - productOffset.left
        };
      };

      Item.prototype.itemClick = function() {
        var pos;
        fade.show();
        logo.show();
        pos = this.absolutePosition();
        this.clonedEl = this.el.cloneNode(true);
        Dynamics.css(this.clonedEl, {
          position: 'absolute',
          top: pos.top,
          left: pos.left,
          zIndex: 100
        });
        productEl.appendChild(this.clonedEl);
        this.el.classList.add('hidden');
        new Dynamics.Animation(this.clonedEl, {
          transform: "translateX(" + (-pos.left + 40) + "px) translateY(" + (-pos.top + 60) + "px) scale(2)",
          opacity: 1
        }, {
          type: Dynamics.Types.Spring,
          friction: 600,
          frequency: 10,
          duration: 2000
        }).start();
        return typeof this.clicked === "function" ? this.clicked() : void 0;
      };

      Item.prototype.close = function() {
        var cloneElPos, pos, transform,
          _this = this;
        fade.hide();
        logo.updateOffset({
          animated: true
        });
        setTimeout(function() {
          return Dynamics.css(_this.clonedEl, {
            zIndex: 1
          });
        }, 400);
        pos = this.absolutePosition();
        transform = "translateX(" + (-parseInt(this.clonedEl.style.left, 10) + pos.left) + "px) translateY(" + (-parseInt(this.clonedEl.style.top, 10) + pos.top) + "px)";
        cloneElPos = cumulativeOffset(this.clonedEl);
        cloneElPos.top += window.scrollY;
        cloneElPos.left += window.scrollX;
        productEl.removeChild(this.clonedEl);
        document.body.appendChild(this.clonedEl);
        Dynamics.css(this.clonedEl, {
          top: cloneElPos.top,
          left: cloneElPos.left
        });
        return new Dynamics.Animation(this.clonedEl, {
          transform: transform,
          opacity: 1
        }, {
          type: Dynamics.Types.Spring,
          friction: 600,
          frequency: 10,
          duration: 2000,
          complete: function() {
            _this.el.classList.remove('hidden');
            document.body.removeChild(_this.clonedEl);
            return _this.clonedEl = null;
          }
        }).start();
      };

      Item.prototype.imgLoaded = function() {
        this.img.className = "loaded";
        return typeof this.loaded === "function" ? this.loaded() : void 0;
      };

      return Item;

    })();
    items = [];
    loadedCount = 0;
    currentItem = null;
    showItems = function() {
      var item, _i, _len, _results;
      loading.stop();
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        _results.push(item.show());
      }
      return _results;
    };
    itemLoaded = function() {
      loadedCount += 1;
      if (loadedCount >= items.length) {
        return showItems();
      }
    };
    itemClicked = function() {
      return currentItem = this;
    };
    for (i = _i = 1; 1 <= SOCKS_COUNT ? _i <= SOCKS_COUNT : _i >= SOCKS_COUNT; i = 1 <= SOCKS_COUNT ? ++_i : --_i) {
      item = new Item(i);
      item.loaded = itemLoaded;
      item.clicked = itemClicked;
      items.push(item);
    }
    for (_j = 0, _len = items.length; _j < _len; _j++) {
      item = items[_j];
      item.load();
    }
    closeCurrentItem = function() {
      if (currentItem != null) {
        currentItem.close();
      }
      return currentItem = null;
    };
    return {
      closeCurrentItem: closeCurrentItem
    };
  })();

  (function() {
    var _this = this;
    window.addEventListener('scroll', function(e) {
      return logo.updateOffset();
    });
    return window.addEventListener('keyup', function(e) {
      if (e.keyCode === 27) {
        return grid.closeCurrentItem();
      }
    });
  })();

}).call(this);
