// Generated by CoffeeScript 1.4.0
(function() {
  var SOCKS_COUNT, fade, logo;

  SOCKS_COUNT = 34;

  fade = (function() {
    var el, hidden, hide, hideTimeout, show;
    el = document.querySelector('#fade');
    el.style.display = 'none';
    hideTimeout = null;
    hidden = true;
    show = function() {
      var _this = this;
      hidden = false;
      el.style.display = 'block';
      if (hideTimeout) {
        clearTimeout(hideTimeout);
      }
      hideTimeout = null;
      return setTimeout(function() {
        return el.className = 'visible';
      });
    };
    hide = function() {
      hidden = true;
      el.className = '';
      return hideTimeout = setTimeout(function() {
        return el.style.display = 'none';
      }, 450);
    };
    return {
      show: show,
      hide: hide,
      isHidden: function() {
        return hidden;
      }
    };
  })();

  logo = (function() {
    var el, scrollFade, show, updateOffset;
    el = document.querySelector('#logo');
    el.addEventListener('click', function() {
      fade.hide();
      return updateOffset({
        animated: true
      });
    });
    scrollFade = 30;
    updateOffset = function(options) {
      var offset, scrollY, _ref;
      if (options == null) {
        options = {};
      }
      if ((_ref = options.animated) == null) {
        options.animated = false;
      }
      if (!fade.isHidden()) {
        return;
      }
      scrollY = Math.min(window.scrollY, scrollFade);
      offset = scrollY / scrollFade;
      new Dynamics.Animation(el, {
        opacity: 1 - offset,
        transform: "translateY(" + (-offset * 10) + "px)"
      }, {
        type: Dynamics.Types.EaseInOut,
        duration: 300,
        animated: options.animated
      }).start();
      if (offset >= 1) {
        return el.className = "hidden";
      } else {
        return el.className = "";
      }
    };
    show = function() {
      new Dynamics.Animation(el, {
        opacity: 1,
        transform: "none"
      }, {
        type: Dynamics.Types.Spring,
        duration: 500
      }).start();
      return el.className = "";
    };
    return {
      show: show,
      updateOffset: updateOffset
    };
  })();

  (function() {
    var a, displayItem, grid, i, img, itemClick, itemOut, itemOver, _i, _results;
    grid = document.querySelector('#grid');
    itemOver = function(a) {
      return new Dynamics.Animation(a, {
        transform: "scale(1.18)"
      }, {
        type: Dynamics.Types.Spring,
        frequency: 25,
        duration: 300
      }).start();
    };
    itemOut = function(a) {
      return new Dynamics.Animation(a, {
        transform: "none"
      }, {
        type: Dynamics.Types.Spring,
        duration: 1500
      }).start();
    };
    displayItem = function(a, index) {
      Dynamics.css(a, {
        opacity: 0,
        transform: "scale(.01)"
      });
      grid.appendChild(a);
      return setTimeout(function() {
        return new Dynamics.Animation(a, {
          transform: "scale(1)",
          opacity: 1
        }, {
          type: Dynamics.Types.Spring,
          friction: 500,
          frequency: 25,
          duration: 2500
        }).start();
      }, index * 20);
    };
    itemClick = function(a) {
      fade.show();
      return logo.show();
    };
    _results = [];
    for (i = _i = 1; 1 <= SOCKS_COUNT ? _i <= SOCKS_COUNT : _i >= SOCKS_COUNT; i = 1 <= SOCKS_COUNT ? ++_i : --_i) {
      a = document.createElement('a');
      a.className = "item";
      img = document.createElement('img');
      img.src = "img/socks/socks-" + i + ".jpg";
      a.appendChild(img);
      a.addEventListener('mouseover', itemOver.bind(this, a));
      a.addEventListener('mouseout', itemOut.bind(this, a));
      a.addEventListener('click', itemClick.bind(this, a));
      _results.push(displayItem(a, i - 1));
    }
    return _results;
  })();

  (function() {
    var _this = this;
    return window.addEventListener('scroll', function(e) {
      return logo.updateOffset();
    });
  })();

}).call(this);
