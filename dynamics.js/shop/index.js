// Generated by CoffeeScript 1.4.0
(function() {
  var Loading, SOCKS_COUNT, cart, cumulativeOffset, fade, grid, loading, logo, product,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SOCKS_COUNT = 34;

  fade = (function() {
    var el, hidden, hide, hideTimeout, show;
    el = document.querySelector('#fade');
    el.style.display = 'none';
    hideTimeout = null;
    hidden = true;
    show = function() {
      var _this = this;
      hidden = false;
      el.style.display = 'block';
      if (hideTimeout) {
        clearTimeout(hideTimeout);
      }
      hideTimeout = null;
      return setTimeout(function() {
        return el.className = 'visible';
      });
    };
    hide = function() {
      hidden = true;
      el.className = '';
      return hideTimeout = setTimeout(function() {
        return el.style.display = 'none';
      }, 450);
    };
    return {
      show: show,
      hide: hide,
      isHidden: function() {
        return hidden;
      }
    };
  })();

  cumulativeOffset = function(el) {
    var left, top;
    top = 0;
    left = 0;
    while (el) {
      top += el.offsetTop || 0;
      left += el.offsetLeft || 0;
      el = el.offsetParent;
    }
    return {
      top: top,
      left: left
    };
  };

  logo = (function() {
    var el, scrollFade, show, updateOffset;
    el = document.querySelector('#logo');
    el.addEventListener('click', function() {
      return grid.closeCurrentItem();
    });
    scrollFade = 30;
    updateOffset = function(options) {
      var offset, scrollY, _ref;
      if (options == null) {
        options = {};
      }
      if ((_ref = options.animated) == null) {
        options.animated = false;
      }
      if (!fade.isHidden()) {
        return;
      }
      scrollY = Math.min(window.scrollY, scrollFade);
      offset = scrollY / scrollFade;
      new Dynamics.Animation(el, {
        opacity: 1 - offset,
        transform: "translateY(" + (-offset * 10) + "px)"
      }, {
        type: Dynamics.Types.EaseInOut,
        duration: 300,
        animated: options.animated
      }).start();
      if (offset >= 1) {
        return el.className = "hidden";
      } else {
        return el.className = "";
      }
    };
    show = function() {
      new Dynamics.Animation(el, {
        opacity: 1,
        transform: "none"
      }, {
        type: Dynamics.Types.Spring,
        duration: 500
      }).start();
      return el.className = "";
    };
    return {
      show: show,
      updateOffset: updateOffset
    };
  })();

  product = (function() {
    var button, closeButtonEl, closeButtonSpan, closeButtonSpanStates, closeButtonSpanVisible, el, hide, hideCloseButton, show, texts,
      _this = this;
    el = document.querySelector('#product');
    texts = el.querySelectorAll('h2 > span, p > span, button');
    closeButtonEl = el.querySelector('a.close');
    closeButtonSpan = closeButtonEl.querySelector('span');
    closeButtonSpanVisible = false;
    button = el.querySelector('button');
    closeButtonSpanStates = ['translateY(-48px)', 'translateX(-48px) rotate(-90deg)'];
    Dynamics.css(closeButtonSpan, {
      transform: closeButtonSpanStates[1]
    });
    closeButtonEl.addEventListener('mouseover', function() {
      closeButtonSpanVisible = true;
      return new Dynamics.Animation(closeButtonSpan, {
        transform: 'none'
      }, {
        type: Dynamics.Types.Spring,
        frequency: 20,
        friction: 800,
        duration: 2000
      }).start();
    });
    hideCloseButton = function(properties, options) {
      var old;
      if (properties == null) {
        properties = null;
      }
      if (options == null) {
        options = null;
      }
      if (!closeButtonSpanVisible) {
        return;
      }
      closeButtonSpanVisible = false;
      old = closeButtonSpan;
      if (properties != null) {
        options.complete = function() {
          return old.parentNode.removeChild(old);
        };
        new Dynamics.Animation(old, properties, options).start();
      } else {
        old.parentNode.removeChild(old);
      }
      closeButtonSpan = closeButtonSpan.cloneNode();
      Dynamics.css(closeButtonSpan, {
        transform: closeButtonSpanStates[1]
      });
      return closeButtonEl.appendChild(closeButtonSpan);
    };
    closeButtonEl.addEventListener('mouseout', function() {
      return hideCloseButton({
        transform: closeButtonSpanStates[0]
      }, {
        type: Dynamics.Types.Spring,
        frequency: 0,
        friction: 490,
        anticipationStrength: 98,
        anticipationSize: 53,
        duration: 500
      });
    });
    show = function() {
      var i, text, _i, _ref, _results,
        _this = this;
      el.style.pointerEvents = 'auto';
      _results = [];
      for (i = _i = 0, _ref = texts.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        text = texts[i];
        _results.push(setTimeout((function(text) {
          return new Dynamics.Animation(text, {
            opacity: 1,
            transform: 'none'
          }, {
            type: Dynamics.Types.Spring,
            frequency: 30,
            friction: 800,
            duration: 2000
          }).start();
        }).bind(this, text), 500 + i * 70));
      }
      return _results;
    };
    hide = function(animated) {
      var h, i, text, _i, _ref, _results;
      if (animated == null) {
        animated = true;
      }
      el.style.pointerEvents = 'none';
      hideCloseButton();
      _results = [];
      for (i = _i = 0, _ref = texts.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        text = texts[i];
        if (text.parentNode.tagName.toLowerCase() === 'h2') {
          h = 24;
        } else {
          h = 18;
        }
        _results.push(new Dynamics.Animation(text, {
          opacity: 0,
          transform: "translateY(" + h + "px)"
        }, {
          type: Dynamics.Types.EaseInOut,
          duration: 200,
          animated: animated
        }).start());
      }
      return _results;
    };
    hide(false);
    return {
      show: show,
      hide: hide,
      closeButtonEl: closeButtonEl,
      button: button
    };
  })();

  Loading = (function() {

    function Loading(el) {
      this.stop = __bind(this.stop, this);

      this.tick = __bind(this.tick, this);

      this.start = __bind(this.start, this);
      this.el = el;
      this.dots = this.el.querySelectorAll('span');
      this.current = 0;
      this.animated = false;
      this.hiddenIndexes = [];
    }

    Loading.prototype.start = function() {
      if (this.animated) {
        return;
      }
      this.animated = true;
      this.tick();
      return this.interval = setInterval(this.tick, 500);
    };

    Loading.prototype.tick = function() {
      var dot;
      dot = this.dots[this.current];
      if (this.stopping) {
        new Dynamics.Animation(dot, {
          opacity: 0
        }, {
          type: Dynamics.Types.EaseInOut,
          duration: 300
        }).start({
          delay: 350
        });
        this.hiddenIndexes.push(this.current);
      }
      new Dynamics.Animation(dot, {
        transform: "translateY(-10px)"
      }, {
        type: Dynamics.Types.GravityWithForce,
        bounce: 60,
        gravity: 1300
      }).start();
      this.current += 1;
      if (this.current > 2) {
        this.current = 0;
      }
      if (this.hiddenIndexes.indexOf(this.current) !== -1) {
        if (this.interval) {
          clearInterval(this.interval);
        }
        return this.hiddenIndexes = [];
      }
    };

    Loading.prototype.stop = function() {
      if (!this.animated) {
        return;
      }
      this.stopping = true;
      return this.animated = false;
    };

    return Loading;

  })();

  loading = new Loading(document.querySelector('header .loading'));

  loading.start();

  cart = (function() {
    var addItem, cartEl, cartLabelEl, closeEl, currentCartLabelEl, items, setCloseButtonVisibility;
    cartEl = document.querySelector('header a#cart');
    closeEl = document.querySelector('header a#closeCart');
    cartLabelEl = cartEl.querySelector('.label');
    currentCartLabelEl = null;
    items = [];
    setCloseButtonVisibility = function(visible, options) {
      var hideElement, opacityAnimationOptions, showElement, _ref;
      if (options == null) {
        options = {};
      }
      if ((_ref = options.animated) == null) {
        options.animated = true;
      }
      opacityAnimationOptions = {
        type: Dynamics.Types.EaseInOut,
        duration: 200,
        animated: options.animated
      };
      showElement = function(el) {
        new Dynamics.Animation(el, {
          transform: "none"
        }, {
          type: Dynamics.Types.Spring,
          frequency: 25,
          friction: 300,
          duration: 700,
          animated: options.animated
        }).start({
          delay: 150
        });
        return new Dynamics.Animation(el, {
          opacity: 1
        }, opacityAnimationOptions).start();
      };
      hideElement = function(el) {
        new Dynamics.Animation(el, {
          transform: "scaleX(.01)"
        }, {
          type: Dynamics.Types.EaseInOut,
          duration: 300,
          animated: options.animated
        }).start();
        return new Dynamics.Animation(el, {
          opacity: 0
        }, opacityAnimationOptions).start({
          delay: options.animated ? 100 : void 0
        });
      };
      if (visible) {
        showElement(closeEl);
        return hideElement(cartEl);
      } else {
        showElement(cartEl);
        return hideElement(closeEl);
      }
    };
    setCloseButtonVisibility(false, {
      animated: false
    });
    addItem = function(item) {
      if (currentCartLabelEl) {
        new Dynamics.Animation(currentCartLabelEl, {
          transform: 'translateY(6px)',
          opacity: 0
        }, {
          type: Dynamics.Types.EaseInOut,
          duration: 250
        }).start();
      }
      items.push(item);
      currentCartLabelEl = cartLabelEl.cloneNode();
      currentCartLabelEl.innerHTML = items.length;
      Dynamics.css(currentCartLabelEl, {
        transform: 'translateY(-6px)',
        opacity: 0
      });
      cartEl.appendChild(currentCartLabelEl);
      cartEl.className = 'filled';
      new Dynamics.Animation(currentCartLabelEl, {
        transform: "none"
      }, {
        type: Dynamics.Types.Gravity,
        bounce: 60,
        gravity: 1300
      }).start();
      return new Dynamics.Animation(currentCartLabelEl, {
        opacity: 1
      }, {
        type: Dynamics.Types.EaseInOut,
        duration: 250
      }).start();
    };
    return {
      addItem: addItem,
      setCloseButtonVisibility: setCloseButtonVisibility
    };
  })();

  grid = (function() {
    var Item, addToCartCurrentItem, cartEl, closeCartEl, closeCurrentItem, currentItem, gridEl, i, item, itemClicked, itemLoaded, items, loadedCount, productEl, showItems, _i, _j, _len;
    gridEl = document.querySelector('#grid');
    productEl = document.querySelector('#product');
    cartEl = document.querySelector('header a#cart');
    closeCartEl = document.querySelector('header a#closeCart');
    Item = (function() {

      function Item(i) {
        this.imgLoaded = __bind(this.imgLoaded, this);

        this.addToCart = __bind(this.addToCart, this);

        this.close = __bind(this.close, this);

        this.animateClonedEl = __bind(this.animateClonedEl, this);

        this.itemClick = __bind(this.itemClick, this);

        this.absolutePosition = __bind(this.absolutePosition, this);

        this.show = __bind(this.show, this);

        this.itemOut = __bind(this.itemOut, this);

        this.itemOver = __bind(this.itemOver, this);

        this.load = __bind(this.load, this);
        this.index = i;
        this.el = document.createElement('a');
        this.el.className = "item";
        this.img = document.createElement('img');
        this.el.appendChild(this.img);
        this.img.addEventListener('load', this.imgLoaded);
        this.el.addEventListener('mouseover', this.itemOver);
        this.el.addEventListener('mouseout', this.itemOut);
        this.el.addEventListener('click', this.itemClick);
      }

      Item.prototype.load = function() {
        return this.img.src = "./img/socks/socks-" + this.index + ".jpg";
      };

      Item.prototype.itemOver = function() {
        return new Dynamics.Animation(this.el, {
          transform: "scale(1.18)",
          opacity: 1
        }, {
          type: Dynamics.Types.Spring,
          frequency: 25,
          duration: 300
        }).start();
      };

      Item.prototype.itemOut = function() {
        return new Dynamics.Animation(this.el, {
          transform: "none"
        }, {
          type: Dynamics.Types.Spring,
          duration: 1500
        }).start();
      };

      Item.prototype.show = function() {
        Dynamics.css(this.el, {
          opacity: 0,
          transform: "scale(.01)"
        });
        gridEl.appendChild(this.el);
        return new Dynamics.Animation(this.el, {
          transform: "scale(1)",
          opacity: 1
        }, {
          type: Dynamics.Types.Spring,
          friction: 500,
          frequency: 25,
          duration: 2500
        }).start({
          delay: this.index * 20
        });
      };

      Item.prototype.absolutePosition = function() {
        var offset, productOffset;
        offset = cumulativeOffset(this.el);
        productOffset = cumulativeOffset(productEl);
        return {
          top: offset.top - window.scrollY - productOffset.top,
          left: offset.left - window.scrollX - productOffset.left
        };
      };

      Item.prototype.itemClick = function() {
        var pos;
        fade.show();
        logo.show();
        product.show();
        pos = this.absolutePosition();
        this.clonedEl = this.el.cloneNode(true);
        this.clonedEl.addEventListener('click', this.close);
        Dynamics.css(this.clonedEl, {
          position: 'absolute',
          top: pos.top,
          left: pos.left,
          zIndex: 100
        });
        productEl.appendChild(this.clonedEl);
        this.el.classList.add('hidden');
        new Dynamics.Animation(this.clonedEl, {
          transform: "translateX(" + (-pos.left + 40) + "px) translateY(" + (-pos.top + 60) + "px) scale(2)",
          opacity: 1
        }, {
          type: Dynamics.Types.Spring,
          friction: 600,
          frequency: 10,
          anticipationSize: 14,
          anticipationStrength: 50,
          duration: 2000
        }).start();
        return typeof this.clicked === "function" ? this.clicked() : void 0;
      };

      Item.prototype.animateClonedEl = function(properties, options, noAnimation) {
        var cloneElPos, pos,
          _this = this;
        if (properties == null) {
          properties = {};
        }
        if (options == null) {
          options = {};
        }
        if (noAnimation == null) {
          noAnimation = true;
        }
        setTimeout(function() {
          return Dynamics.css(_this.clonedEl, {
            zIndex: 1
          });
        }, 400);
        pos = this.absolutePosition();
        cloneElPos = cumulativeOffset(this.clonedEl);
        cloneElPos.top += window.scrollY;
        cloneElPos.left += window.scrollX;
        productEl.removeChild(this.clonedEl);
        document.body.appendChild(this.clonedEl);
        Dynamics.css(this.clonedEl, {
          top: cloneElPos.top,
          left: cloneElPos.left
        });
        options.complete = function() {
          if (!noAnimation) {
            Dynamics.css(_this.el, {
              transform: 'scale(.01)'
            });
            new Dynamics.Animation(_this.el, {
              transform: 'none'
            }, {
              type: Dynamics.Types.Spring,
              friction: 600,
              frequency: 20,
              anticipationSize: 14,
              anticipationStrength: 50,
              duration: 2000
            }).start();
          }
          _this.el.classList.remove('hidden');
          document.body.removeChild(_this.clonedEl);
          return _this.clonedEl = null;
        };
        return new Dynamics.Animation(this.clonedEl, properties, options).start();
      };

      Item.prototype.close = function() {
        var pos, transform;
        fade.hide();
        logo.updateOffset({
          animated: true
        });
        product.hide();
        pos = this.absolutePosition();
        transform = "translateX(" + (-parseInt(this.clonedEl.style.left, 10) + pos.left) + "px) translateY(" + (-parseInt(this.clonedEl.style.top, 10) + pos.top) + "px)";
        return this.animateClonedEl({
          transform: transform,
          opacity: 1
        }, {
          type: Dynamics.Types.Spring,
          friction: 600,
          frequency: 10,
          duration: 2000
        });
      };

      Item.prototype.addToCart = function() {
        var offset, pos, transform;
        fade.hide();
        logo.updateOffset({
          animated: true
        });
        product.hide();
        pos = cumulativeOffset(this.el);
        offset = cumulativeOffset(cartEl);
        offset.left += 27;
        transform = "translateX(" + (offset.left - pos.left - 32) + "px) translateY(" + (offset.top - pos.top - 48) + "px) scale(.2)";
        console.log(pos, offset);
        console.log(transform);
        new Dynamics.Animation(this.clonedEl, {
          opacity: 0
        }, {
          type: Dynamics.Types.EaseInOut,
          duration: 300
        }).start({
          delay: 400
        });
        return this.animateClonedEl({
          transform: transform
        }, {
          type: Dynamics.Types.Spring,
          frequency: 3,
          friction: 200,
          anticipationStrength: 67,
          anticipationSize: 44,
          duration: 700
        }, false);
      };

      Item.prototype.imgLoaded = function() {
        this.img.className = "loaded";
        return typeof this.loaded === "function" ? this.loaded() : void 0;
      };

      return Item;

    })();
    items = [];
    loadedCount = 0;
    currentItem = null;
    showItems = function() {
      var item, _i, _len, _results;
      loading.stop();
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        _results.push(item.show());
      }
      return _results;
    };
    itemLoaded = function() {
      loadedCount += 1;
      if (loadedCount >= items.length) {
        return showItems();
      }
    };
    itemClicked = function() {
      return currentItem = this;
    };
    for (i = _i = 1; 1 <= SOCKS_COUNT ? _i <= SOCKS_COUNT : _i >= SOCKS_COUNT; i = 1 <= SOCKS_COUNT ? ++_i : --_i) {
      item = new Item(i);
      item.loaded = itemLoaded;
      item.clicked = itemClicked;
      items.push(item);
    }
    for (_j = 0, _len = items.length; _j < _len; _j++) {
      item = items[_j];
      item.load();
    }
    cartEl.addEventListener('click', function() {
      var delay, offset, translateX, windowHeight, windowWidth, _results;
      cart.setCloseButtonVisibility(true);
      windowWidth = window.innerWidth;
      windowHeight = window.innerHeight;
      _results = [];
      for (i in items) {
        item = items[i];
        offset = cumulativeOffset(item.el);
        delay = Math.abs(offset.left - (windowWidth / 2)) / (windowWidth / 2) + offset.top / windowHeight;
        delay *= 500;
        translateX = offset.left - (windowWidth / 2);
        _results.push(new Dynamics.Animation(item.el, {
          transform: "translateY(-" + (offset.top + 160) + "px) translateX(" + translateX + "px) rotate(" + (Math.round(Math.random() * 90 - 45)) + "deg)"
        }, {
          type: Dynamics.Types.Bezier,
          duration: 450,
          points: [
            {
              "x": 0,
              "y": 0,
              "controlPoints": [
                {
                  "x": 0.2,
                  "y": 0
                }
              ]
            }, {
              "x": 1,
              "y": 1,
              "controlPoints": [
                {
                  "x": 0.843,
                  "y": 0.351
                }
              ]
            }
          ]
        }).start({
          delay: delay
        }));
      }
      return _results;
    });
    closeCartEl.addEventListener('click', function() {
      var delay, offset, translateX, windowHeight, windowWidth, _results;
      cart.setCloseButtonVisibility(false);
      windowWidth = window.innerWidth;
      windowHeight = window.innerHeight;
      _results = [];
      for (i in items) {
        item = items[i];
        offset = cumulativeOffset(item.el);
        delay = Math.abs(offset.left - (windowWidth / 2)) / (windowWidth / 2) + (windowHeight - offset.top) / windowHeight;
        delay *= 500;
        translateX = offset.left - (windowWidth / 2);
        _results.push(new Dynamics.Animation(item.el, {
          transform: "none"
        }, {
          type: Dynamics.Types.Spring,
          frequency: 3,
          friction: 200,
          duration: 700
        }).start({
          delay: delay
        }));
      }
      return _results;
    });
    closeCurrentItem = function() {
      if (currentItem != null) {
        currentItem.close();
      }
      return currentItem = null;
    };
    addToCartCurrentItem = function() {
      if (currentItem != null) {
        setTimeout(cart.addItem.bind(cart, currentItem), 500);
        currentItem.addToCart();
      }
      return currentItem = null;
    };
    return {
      closeCurrentItem: closeCurrentItem,
      addToCartCurrentItem: addToCartCurrentItem
    };
  })();

  (function() {
    var _this = this;
    window.addEventListener('scroll', logo.updateOffset);
    window.addEventListener('keyup', function(e) {
      if (e.keyCode === 27) {
        return grid.closeCurrentItem();
      }
    });
    product.closeButtonEl.addEventListener('click', grid.closeCurrentItem);
    return product.button.addEventListener('click', grid.addToCartCurrentItem);
  })();

}).call(this);
