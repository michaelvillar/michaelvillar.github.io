// Generated by CoffeeScript 1.4.0
(function() {
  var SOCKS_COUNT, fade, logo,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SOCKS_COUNT = 34;

  fade = (function() {
    var el, hidden, hide, hideTimeout, show;
    el = document.querySelector('#fade');
    el.style.display = 'none';
    hideTimeout = null;
    hidden = true;
    show = function() {
      var _this = this;
      hidden = false;
      el.style.display = 'block';
      if (hideTimeout) {
        clearTimeout(hideTimeout);
      }
      hideTimeout = null;
      return setTimeout(function() {
        return el.className = 'visible';
      });
    };
    hide = function() {
      hidden = true;
      el.className = '';
      return hideTimeout = setTimeout(function() {
        return el.style.display = 'none';
      }, 450);
    };
    return {
      show: show,
      hide: hide,
      isHidden: function() {
        return hidden;
      }
    };
  })();

  logo = (function() {
    var el, scrollFade, show, updateOffset;
    el = document.querySelector('#logo');
    el.addEventListener('click', function() {
      fade.hide();
      return updateOffset({
        animated: true
      });
    });
    scrollFade = 30;
    updateOffset = function(options) {
      var offset, scrollY, _ref;
      if (options == null) {
        options = {};
      }
      if ((_ref = options.animated) == null) {
        options.animated = false;
      }
      if (!fade.isHidden()) {
        return;
      }
      scrollY = Math.min(window.scrollY, scrollFade);
      offset = scrollY / scrollFade;
      new Dynamics.Animation(el, {
        opacity: 1 - offset,
        transform: "translateY(" + (-offset * 10) + "px)"
      }, {
        type: Dynamics.Types.EaseInOut,
        duration: 300,
        animated: options.animated
      }).start();
      if (offset >= 1) {
        return el.className = "hidden";
      } else {
        return el.className = "";
      }
    };
    show = function() {
      new Dynamics.Animation(el, {
        opacity: 1,
        transform: "none"
      }, {
        type: Dynamics.Types.Spring,
        duration: 500
      }).start();
      return el.className = "";
    };
    return {
      show: show,
      updateOffset: updateOffset
    };
  })();

  (function() {
    var Item, grid, i, _i, _results;
    grid = document.querySelector('#grid');
    Item = (function() {

      function Item(i) {
        this.imgLoaded = __bind(this.imgLoaded, this);

        this.itemClick = __bind(this.itemClick, this);

        this.displayItem = __bind(this.displayItem, this);

        this.itemOut = __bind(this.itemOut, this);

        this.itemOver = __bind(this.itemOver, this);
        this.index = i;
        this.el = document.createElement('a');
        this.el.className = "item";
        this.img = document.createElement('img');
        this.img.src = "http://michaelvillar.github.io/dynamics.js/shop/img/socks/socks-" + i + ".jpg";
        this.el.appendChild(this.img);
        this.img.addEventListener('load', this.imgLoaded);
        this.el.addEventListener('mouseover', this.itemOver);
        this.el.addEventListener('mouseout', this.itemOut);
        this.el.addEventListener('click', this.itemClick);
        this.displayItem();
      }

      Item.prototype.itemOver = function() {
        return new Dynamics.Animation(this.el, {
          transform: "scale(1.18)"
        }, {
          type: Dynamics.Types.Spring,
          frequency: 25,
          duration: 300
        }).start();
      };

      Item.prototype.itemOut = function() {
        return new Dynamics.Animation(this.el, {
          transform: "none"
        }, {
          type: Dynamics.Types.Spring,
          duration: 1500
        }).start();
      };

      Item.prototype.displayItem = function() {
        var _this = this;
        Dynamics.css(this.el, {
          opacity: 0,
          transform: "scale(.01)"
        });
        grid.appendChild(this.el);
        return setTimeout(function() {
          return new Dynamics.Animation(_this.el, {
            transform: "scale(1)",
            opacity: 1
          }, {
            type: Dynamics.Types.Spring,
            friction: 500,
            frequency: 25,
            duration: 2500
          }).start();
        }, this.index * 20);
      };

      Item.prototype.itemClick = function() {
        fade.show();
        return logo.show();
      };

      Item.prototype.imgLoaded = function() {
        return this.img.className = "loaded";
      };

      return Item;

    })();
    _results = [];
    for (i = _i = 1; 1 <= SOCKS_COUNT ? _i <= SOCKS_COUNT : _i >= SOCKS_COUNT; i = 1 <= SOCKS_COUNT ? ++_i : --_i) {
      _results.push(new Item(i));
    }
    return _results;
  })();

  (function() {
    var _this = this;
    return window.addEventListener('scroll', function(e) {
      return logo.updateOffset();
    });
  })();

}).call(this);
